name: Build and Push all microservices to AWS ECR

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push all Dockerfiles
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "ðŸª£ Using registry: $ECR_REGISTRY"

          for file in Docker/Dockerfile.*; do
            SERVICE_NAME=$(basename "$file" | cut -d. -f2)
            ECR_REPO="educollab/$SERVICE_NAME"
            
            echo "ðŸš€ Building and pushing $SERVICE_NAME"

            # Build image
            docker build -t "$ECR_REGISTRY/$ECR_REPO:${IMAGE_TAG}" -f "$file" .

            # Push versioned tag
            docker push "$ECR_REGISTRY/$ECR_REPO:${IMAGE_TAG}"

            # Tag and push latest
            docker tag "$ECR_REGISTRY/$ECR_REPO:${IMAGE_TAG}" "$ECR_REGISTRY/$ECR_REPO:latest"
            docker push "$ECR_REGISTRY/$ECR_REPO:latest"
          done

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ECR_REGISTRY }}
        run: |
          echo "ðŸš€ Pulling latest Docker images and restarting containers..."
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_IP << 'EOF'
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 980104892293.dkr.ecr.eu-north-1.amazonaws.com
            docker-compose pull
            docker-compose up -d
          EOF
